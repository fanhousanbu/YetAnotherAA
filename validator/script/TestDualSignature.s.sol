// SPDX-License-Identifier: MIT
pragma solidity ^0.8.19;

import "forge-std/Script.sol";
import "../src/AAStarValidator.sol";

/**
 * @title TestDualSignature
 * @dev Script to test the dual signature verification functionality
 * Use this script with signatures generated by signer/index.js
 */
contract TestDualSignature is Script {
    AAStarValidator public validator;
    
    function run() external {
        // Contract address (update this to your deployed contract)
        address validatorAddress = 0xFd6299F33559Ca45e0460E946a4d65b6EAc966F4;
        validator = AAStarValidator(validatorAddress);
        
        console.log("=== Testing Dual Signature Verification ===");
        console.log("Contract Address:", validatorAddress);
        
        // Test parameters - Update these with actual values from signer/index.js output
        // Example: node index.js "test message for contract verification" 1,2,3
        
        bytes32[] memory nodeIds = new bytes32[](2);
        nodeIds[0] = 0xf26f8bdca182790bad5481c1f0eac3e7ffb135ab33037dd02b8d98a1066c6e5d; // node_1
        nodeIds[1] = 0xc0e74ed91b71668dd2619e1bacaccfcc495bdbbd0a1b2a64295550c701762272; // node_2
        
        // Replace these with actual signature data from signer/index.js
        bytes memory blsSignature = hex"000000000000000000000000000000001895b31a58aa7cb6cba707d69801e9bd269ef16bc740c29c671731e147aff39b0daf0f30b26922cd38ed47fb8b904f4f0000000000000000000000000000000008c5f2acf8234152bbf9fae2e09004da01c94068ff86c3742b365bdf5bc615440017becf717f1e76eb9e17fc6a2be63b000000000000000000000000000000000d9744e86edb17c836697c20eee6f97573529d26147100c1821be168ffc1b510e7508ea78d9b194fe79343eec7a16fe2000000000000000000000000000000000ac843d1b455dec28b616c3b3721b59a27188803140e6bc6d192b6910adb75ec07a13fdb016dfc788f1104d55957933c";
        
        bytes memory messagePoint = hex"0000000000000000000000000000000016def1cc37adca029aed3a5831e64ea43b0cd83f44a8b57acae91a3f8ae0a1ea4601871b4b7026d3f877ad0bd81ebf2c000000000000000000000000000000000f5443b66e3f22078e1cfe1d0b0c0dcfd263c5ee23f109c9ef3c42f52a46019b3d7198ff264f7917597a667eb4bc22350000000000000000000000000000000013405bb6b2a33b89b4985e7690dbc86bfd3b593fd279fd140e4d856525551a374a0e320800dc751883689adca6153da60000000000000000000000000000000002293cb4c972921dae273e0da92c54eb50e02e7058feb8c16509f756f11186a530ef66e41f3a3f8b0af77386efd60147";
        
        // AA signature parameters
        address aaAddress = 0x20a2dB470BCc95f63E92A37044a1e40F602c481c;
        bytes memory aaSignature = hex"0ffb431b770066816d46be9f570573321179bf28a921c3cb3a47714830d6481f52d65c8a65c2cbdccb80c36ac1b7688a1a5c1790488ff59b089e6908ad6a049c1c";
        
        console.log("Testing parameters:");
        console.log("- Node Count:", nodeIds.length);
        console.log("- AA Address:", aaAddress);
        console.log("- BLS Signature Length:", blsSignature.length);
        console.log("- Message Point Length:", messagePoint.length);
        console.log("- AA Signature Length:", aaSignature.length);
        
        // Test view function first
        console.log("\n=== Testing validateAggregateSignature (view) ===");
        try validator.validateAggregateSignature(
            nodeIds,
            blsSignature,
            messagePoint,
            aaAddress,
            aaSignature
        ) returns (bool isValid) {
            console.log("View validation result:", isValid ? "VALID" : "INVALID");
        } catch Error(string memory reason) {
            console.log("View validation failed:", reason);
        } catch (bytes memory) {
            console.log("View validation failed with low-level error");
        }
        
        // Test transaction function
        console.log("\n=== Testing verifyAggregateSignature (transaction) ===");
        vm.startBroadcast();
        
        try validator.verifyAggregateSignature(
            nodeIds,
            blsSignature,
            messagePoint,
            aaAddress,
            aaSignature
        ) returns (bool isValid) {
            console.log("Transaction validation result:", isValid ? "VALID" : "INVALID");
        } catch Error(string memory reason) {
            console.log("Transaction validation failed:", reason);
        } catch (bytes memory) {
            console.log("Transaction validation failed with low-level error");
        }
        
        vm.stopBroadcast();
        
        console.log("\n=== Test Complete ===");
        console.log("Note: Update the signature parameters with fresh data from signer/index.js");
    }
    
    /**
     * @dev Helper function to get current contract state
     */
    function getContractInfo() external view {
        console.log("=== Contract Information ===");
        console.log("Owner:", validator.owner());
        console.log("Registered Node Count:", validator.getRegisteredNodeCount());
        
        // Check if test nodes are registered
        bytes32 node1 = 0xf26f8bdca182790bad5481c1f0eac3e7ffb135ab33037dd02b8d98a1066c6e5d;
        bytes32 node2 = 0xc0e74ed91b71668dd2619e1bacaccfcc495bdbbd0a1b2a64295550c701762272;
        
        console.log("Node 1 registered:", validator.isRegistered(node1));
        console.log("Node 2 registered:", validator.isRegistered(node2));
    }
}