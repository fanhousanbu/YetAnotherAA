// SPDX-License-Identifier: MIT
pragma solidity ^0.8.19;

import "forge-std/Script.sol";
import "../src/AAStarValidator.sol";

/**
 * @title TestBlsSignature
 * @dev Script to test the bls signature verification functionality
 * Use this script with signatures generated by signer/index.js
 */
contract TestBlsSignature is Script {
    AAStarValidator public validator;
    
    function run() external {
        // Contract address (newly deployed)
        address validatorAddress = 0x6f5F51654eeDfDBba5E053d022A7282f63ec8687;
        validator = AAStarValidator(validatorAddress);
        
        console.log("=== Testing Bls Signature Verification ===");
        console.log("Contract Address:", validatorAddress);
        
        // Test parameters - Generated from signer/demo/demo.js
        // Command: node demo.js "test message for contract verification" 1,2
        // Message: "test message for contract verification"
        // Participating nodes: 1, 2
        
        bytes32[] memory nodeIds = new bytes32[](2);
        nodeIds[0] = 0xf26f8bdca182790bad5481c1f0eac3e7ffb135ab33037dd02b8d98a1066c6e5d; // node_1
        nodeIds[1] = 0xc0e74ed91b71668dd2619e1bacaccfcc495bdbbd0a1b2a64295550c701762272; // node_2
        
        // Real BLS signature and message point generated by demo.js
        bytes memory blsSignature = hex"00000000000000000000000000000000042b3448aa55317d2f2d4f54c38adc5c7fbd63957686352ec25d2f8488eaf7545e2e604127cc25f1cf87024e6df2087400000000000000000000000000000000052cc97a27d99b37c05de7b66e287094544145ef2f284aa049c0e6f9490df9cfb14ea5c30becc4a20e7fa18ad7644183000000000000000000000000000000000b755abbfea48d2980d1c4dd479c8b941cbd6729f83ca74e71bc8b1dbf2f9c67ed9f027c8bee0c8ad77dccaaccd3a95100000000000000000000000000000000115dee7d0a4902d47342186b4e8f6ea09565b7e5a57c26cbf8ca0f740f02305fffbc59a783d0c6b9f28d2cc23e621f9f";
        
        bytes memory messagePoint = hex"000000000000000000000000000000000314dd016c51db92fac9f9e0e51ac75c5d75cf817e975cf9b413d8abce3b207ad15cead3e0219f636493ad486855192e00000000000000000000000000000000128abe7a372eb114cfca828155e9fc8b0e5908e54a6a706cbe563fee21124923be9544ce10ab9ed579f0929c3e1e5fed000000000000000000000000000000001414853f0a5179b3b6496e0f2b545a76fc1679f34002ac743722d6e351bb291a4d4b57e07e508425efb4a836afb2844e000000000000000000000000000000000b00b0e5f3afa03ed7036e1a81864016e4283abb0e4d8c504484a741753b01317b6cc64cf7a245a3e05ac860990a03cb";
        
        
        console.log("Testing parameters:");
        console.log("- Node Count:", nodeIds.length);
        console.log("- BLS Signature Length:", blsSignature.length);
        console.log("- Message Point Length:", messagePoint.length);
        
        // Test view function first
        console.log("\n=== Testing validateAggregateSignature (view) ===");
        try validator.validateAggregateSignature(
            nodeIds,
            blsSignature,
            messagePoint
        ) returns (bool isValid) {
            console.log("View validation result:", isValid ? "VALID" : "INVALID");
        } catch Error(string memory reason) {
            console.log("View validation failed:", reason);
        } catch (bytes memory) {
            console.log("View validation failed with low-level error");
        }
        
        // Test transaction function
        console.log("\n=== Testing verifyAggregateSignature (transaction) ===");
        vm.startBroadcast();
        
        try validator.verifyAggregateSignature(
            nodeIds,
            blsSignature,
            messagePoint
        ) returns (bool isValid) {
            console.log("Transaction validation result:", isValid ? "VALID" : "INVALID");
        } catch Error(string memory reason) {
            console.log("Transaction validation failed:", reason);
        } catch (bytes memory) {
            console.log("Transaction validation failed with low-level error");
        }
        
        vm.stopBroadcast();
        
        console.log("\n=== Test Complete ===");
        console.log("Note: Update the signature parameters with fresh data from signer/index.js");
    }
    
    /**
     * @dev Helper function to get current contract state
     */
    function getContractInfo() external view {
        console.log("=== Contract Information ===");
        console.log("Owner:", validator.owner());
        console.log("Registered Node Count:", validator.getRegisteredNodeCount());
        
        // Check if test nodes are registered
        bytes32 node1 = 0xf26f8bdca182790bad5481c1f0eac3e7ffb135ab33037dd02b8d98a1066c6e5d;
        bytes32 node2 = 0xc0e74ed91b71668dd2619e1bacaccfcc495bdbbd0a1b2a64295550c701762272;
        
        console.log("Node 1 registered:", validator.isRegistered(node1));
        console.log("Node 2 registered:", validator.isRegistered(node2));
    }
}