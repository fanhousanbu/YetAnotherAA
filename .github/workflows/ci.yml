name: CI

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
  pull_request_target: # Add this trigger to run CI for Dependabot PRs
    types:
      - opened
      - synchronize
      - reopened
  schedule:
    - cron: "0 0 * * 1" # Weekly security scan on Monday

permissions:
  actions: read
  contents: read
  security-events: write

jobs:
  # Job 1: Security audit
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Use Node.js 20
        uses: actions/setup-node@v5
        with:
          node-version: "20"
          cache: "npm"

      - name: Run npm audit (Backend)
        working-directory: ./aastar
        run: npm ci && npm audit --audit-level=moderate

      - name: Run npm audit (Frontend)
        working-directory: ./aastar-frontend
        run: npm ci && npm audit --audit-level=moderate

      - name: Run npm audit (Signer)
        working-directory: ./signer
        run: npm ci && npm audit --audit-level=moderate

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-results.sarif"

      - name: Dependency Review
        if: github.event_name == 'pull_request'
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: high

  # Job 2: Code quality checks
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    strategy:
      matrix:
        project: [aastar, aastar-frontend, signer]
    steps:
      - uses: actions/checkout@v5

      - name: Use Node.js 20
        uses: actions/setup-node@v5
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        working-directory: ./${{ matrix.project }}
        run: npm ci

      - name: Check formatting
        working-directory: ./${{ matrix.project }}
        run: |
          if [ -f package.json ] && jq -e '.scripts["format:check"]' package.json > /dev/null; then
            npm run format:check
          else
            npx prettier --check "**/*.{js,jsx,ts,tsx,json,css,md}"
          fi

      - name: Run linter
        working-directory: ./${{ matrix.project }}
        run: |
          if [ -f package.json ] && jq -e '.scripts.lint' package.json > /dev/null; then
            npm run lint:check || npm run lint
          else
            npx eslint . --ext .js,.jsx,.ts,.tsx
          fi

  # Job 3: Build all projects
  build:
    name: Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - project: aastar
            build-command: npm run build
          - project: aastar-frontend
            build-command: npm run build
          - project: signer
            build-command: npm run build
    steps:
      - uses: actions/checkout@v5

      - name: Use Node.js 20
        uses: actions/setup-node@v5
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        working-directory: ./${{ matrix.project }}
        run: npm ci

      - name: Build project
        working-directory: ./${{ matrix.project }}
        run: ${{ matrix.build-command }}
        env:
          CI: true

  # Job 4: Run tests
  test:
    name: Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        project: [aastar, signer]
    steps:
      - uses: actions/checkout@v5

      - name: Use Node.js 20
        uses: actions/setup-node@v5
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        working-directory: ./${{ matrix.project }}
        run: npm ci

      - name: Run tests
        working-directory: ./${{ matrix.project }}
        run: npm test || npm run test:ci || echo "No tests configured"
        env:
          CI: true
          NODE_ENV: test

  # Job 5: Solidity contracts
  contracts:
    name: Smart Contracts
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./validator
    steps:
      - uses: actions/checkout@v5
        with:
          submodules: recursive

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: nightly

      - name: Build contracts
        run: forge build

      - name: Run tests
        run: forge test -vvv

      - name: Check contract sizes
        run: forge build --sizes

      - name: Run coverage
        run: forge coverage

  # Job 6: Type checking
  typecheck:
    name: Type Check
    runs-on: ubuntu-latest
    strategy:
      matrix:
        project: [aastar, aastar-frontend, signer]
    steps:
      - uses: actions/checkout@v5

      - name: Use Node.js 20
        uses: actions/setup-node@v5
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        working-directory: ./${{ matrix.project }}
        run: npm ci

      - name: Run TypeScript compiler
        working-directory: ./${{ matrix.project }}
        run: |
          if [ -f package.json ] && jq -e '.scripts["type-check"]' package.json > /dev/null; then
            npm run type-check
          else
            npx tsc --noEmit
          fi

  # Job 7: CodeQL Analysis
  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        language: ["javascript", "typescript"]
    steps:
      - uses: actions/checkout@v5

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # Job 8: Summary job for branch protection
  ci-success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [security, quality, build, test, contracts, typecheck, codeql]
    if: always()
    steps:
      - name: Check all jobs status
        run: |
          if [[ "${{ needs.security.result }}" == "success" && 
                "${{ needs.quality.result }}" == "success" && 
                "${{ needs.build.result }}" == "success" && 
                "${{ needs.test.result }}" == "success" && 
                "${{ needs.contracts.result }}" == "success" && 
                "${{ needs.typecheck.result }}" == "success" && 
                "${{ needs.codeql.result }}" == "success" ]]; then
            echo "All CI checks passed!"
          else
            echo "Some CI checks failed"
            exit 1
          fi
